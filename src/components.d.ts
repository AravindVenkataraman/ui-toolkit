/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface CvsButton {
        /**
          * single element `id` of the container the button expands and collapses, use with `aria-expanded`
         */
        "ariaControls": "";
        /**
          * single element `id` of the element containing description text
         */
        "ariaDescribedBy": "";
        /**
          * set to `true` if the button is disabled
         */
        "ariaDisabled": true | false;
        /**
          * indicate if expandable content is expanded or not
         */
        "ariaExpanded": true | false;
        /**
          * gives accessible name, will override button text, do not use in conjunction with `aria-labelledby`
         */
        "ariaLabel": "";
        /**
          * one or more element `id`(s), that hold label text, will override button text, do not use in conjunction with `aria-label`
         */
        "ariaLabelledBy": "";
        /**
          * only used for toggle buttons, used to indicate if button is pressed or not, 'mixed' is not supported
         */
        "ariaPressed": true | false;
        /**
          * if toggle (role is generedated in HTML) else use type passed and append type='{buttonType}' to button
         */
        "buttonType": "button" | "reset" | "submit" | "toggle";
        "color": "plain" | "primary" | "secondary" | "danger";
        "theme": "light" | "dark";
        "type": "basic" | "raised" | "outline" | "flat";
    }
    interface CvsModal {
        "content": string;
        "open": () => Promise<void>;
        "title": string;
    }
    interface CvsPbmDpp {
        "language": string;
        "ndc": string;
        "token": string;
    }
    interface CvsSwitch {
        "title": string;
    }
}
declare global {
    interface HTMLCvsButtonElement extends Components.CvsButton, HTMLStencilElement {
    }
    var HTMLCvsButtonElement: {
        prototype: HTMLCvsButtonElement;
        new (): HTMLCvsButtonElement;
    };
    interface HTMLCvsModalElement extends Components.CvsModal, HTMLStencilElement {
    }
    var HTMLCvsModalElement: {
        prototype: HTMLCvsModalElement;
        new (): HTMLCvsModalElement;
    };
    interface HTMLCvsPbmDppElement extends Components.CvsPbmDpp, HTMLStencilElement {
    }
    var HTMLCvsPbmDppElement: {
        prototype: HTMLCvsPbmDppElement;
        new (): HTMLCvsPbmDppElement;
    };
    interface HTMLCvsSwitchElement extends Components.CvsSwitch, HTMLStencilElement {
    }
    var HTMLCvsSwitchElement: {
        prototype: HTMLCvsSwitchElement;
        new (): HTMLCvsSwitchElement;
    };
    interface HTMLElementTagNameMap {
        "cvs-button": HTMLCvsButtonElement;
        "cvs-modal": HTMLCvsModalElement;
        "cvs-pbm-dpp": HTMLCvsPbmDppElement;
        "cvs-switch": HTMLCvsSwitchElement;
    }
}
declare namespace LocalJSX {
    interface CvsButton {
        /**
          * single element `id` of the container the button expands and collapses, use with `aria-expanded`
         */
        "ariaControls"?: "";
        /**
          * single element `id` of the element containing description text
         */
        "ariaDescribedBy"?: "";
        /**
          * set to `true` if the button is disabled
         */
        "ariaDisabled"?: true | false;
        /**
          * indicate if expandable content is expanded or not
         */
        "ariaExpanded"?: true | false;
        /**
          * gives accessible name, will override button text, do not use in conjunction with `aria-labelledby`
         */
        "ariaLabel"?: "";
        /**
          * one or more element `id`(s), that hold label text, will override button text, do not use in conjunction with `aria-label`
         */
        "ariaLabelledBy"?: "";
        /**
          * only used for toggle buttons, used to indicate if button is pressed or not, 'mixed' is not supported
         */
        "ariaPressed"?: true | false;
        /**
          * if toggle (role is generedated in HTML) else use type passed and append type='{buttonType}' to button
         */
        "buttonType"?: "button" | "reset" | "submit" | "toggle";
        "color"?: "plain" | "primary" | "secondary" | "danger";
        "theme"?: "light" | "dark";
        "type"?: "basic" | "raised" | "outline" | "flat";
    }
    interface CvsModal {
        "content"?: string;
        "title"?: string;
    }
    interface CvsPbmDpp {
        "language"?: string;
        "ndc"?: string;
        "token"?: string;
    }
    interface CvsSwitch {
        "onToggle"?: (event: CustomEvent<boolean>) => void;
        "title"?: string;
    }
    interface IntrinsicElements {
        "cvs-button": CvsButton;
        "cvs-modal": CvsModal;
        "cvs-pbm-dpp": CvsPbmDpp;
        "cvs-switch": CvsSwitch;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "cvs-button": LocalJSX.CvsButton & JSXBase.HTMLAttributes<HTMLCvsButtonElement>;
            "cvs-modal": LocalJSX.CvsModal & JSXBase.HTMLAttributes<HTMLCvsModalElement>;
            "cvs-pbm-dpp": LocalJSX.CvsPbmDpp & JSXBase.HTMLAttributes<HTMLCvsPbmDppElement>;
            "cvs-switch": LocalJSX.CvsSwitch & JSXBase.HTMLAttributes<HTMLCvsSwitchElement>;
        }
    }
}
